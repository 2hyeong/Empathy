openapi: 3.0.2
info:
  title: Empathy
  version: "1.0"
servers:
- url: http://localhost:3000/api
tags:
- name: users
- name: friends
paths:
  /users:
    get:
      description: List all users
      operationId: getUsers
      parameters:
      - description: How many items to return at one time (max 100)
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A paged array of users
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: List
      tags:
      - users
    post:
      description: Create a user
      operationId: createUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUsers_200_response'
          description: success
        "201":
          description: Empty response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create
      tags:
      - users
    put:
      description: Update a user
      operationId: updateUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUsers_200_response'
          description: success
        "201":
          description: Empty response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Update
      tags:
      - users
  /users/{userId}:
    get:
      description: Info for a specific user
      operationId: getUser
      parameters:
      - description: The id of the user to retrieve
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Detail
      tags:
      - user
  /users/friends:
    get:
      description: List all friends in users
      operationId: getFriends
      parameters:
      - description: How many items to return at one time (max 100)
        in: query
        name: limit
        required: false
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Friend'
                type: array
          description: A paged array of friends in users
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: List
      tags:
      - friends
    post:
      description: Create a friend
      operationId: createFriend
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUsers_200_response'
          description: success
        "201":
          description: Empty response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create
      tags:
      - friends
  /users/friends/{friendId}:
    delete:
      description: Delete a friend
      operationId: deleteFriend
      parameters:
      - description: The id of the friend to retrieve
        in: path
        name: friendId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateUsers_200_response'
          description: success
        "201":
          description: Empty response
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Delete
      tags:
      - friends
    get:
      description: Info for a specific friend
      operationId: getFriend
      parameters:
      - description: The id of the friend to retrieve
        in: path
        name: friendId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Get
      tags:
      - friend
  /me:
    get:
      description: Get me
      operationId: getMe
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Me
      tags:
      - user
  /health:
    get:
      operationId: checkHealth
      responses:
        "200":
          description: OK
        "404":
          description: NOT FOUND
components:
  parameters:
    limit:
      description: How many items to return at one time (max 100)
      in: query
      name: limit
      required: false
      schema:
        format: int32
        type: integer
    userId:
      description: The id of the user to retrieve
      in: path
      name: userId
      required: true
      schema:
        type: string
    friendId:
      description: The id of the friend to retrieve
      in: path
      name: friendId
      required: true
      schema:
        type: string
  responses:
    UnexpectedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: unexpected error
    Success:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updateUsers_200_response'
      description: success
    EmptyResponse:
      description: Empty response
  schemas:
    User:
      example:
        birthday: birthday
        age_range: age_range
        image: image
        personality: personality
        gender: gender
        name: name
        id: id
        friends:
        - personality: personality
          name: name
          id: id
        - personality: personality
          name: name
          id: id
      properties:
        id:
          type: string
        name:
          type: string
        birthday:
          type: string
        personality:
          type: string
        gender:
          type: string
        age_range:
          type: string
        image:
          type: string
        friends:
          items:
            $ref: '#/components/schemas/Friend'
          type: array
      type: object
    Error:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      required:
      - code
      - message
      type: object
    Friend:
      example:
        personality: personality
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        personality:
          type: string
      required:
      - id
      - name
      - personality
      type: object
    updateUsers_200_response:
      example:
        ok: true
      properties:
        ok:
          type: boolean
      required:
      - ok
      type: object
